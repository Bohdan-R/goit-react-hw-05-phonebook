{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/store.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","index.js"],"names":["addContact","createAction","name","number","payload","id","shortid","generate","deleteContact","changeFilter","items","createReducer","actions","state","filter","_","combineReducers","contactsPersistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contacts","persistReducer","contactReducer","devTools","process","persistor","persistStore","ContactForm","handleSubmit","e","preventDefault","contactName","props","map","contact","push","toLowerCase","includes","alert","onSubmit","resetInput","handleChange","currentTarget","value","setState","this","className","type","pattern","title","required","onChange","Component","connect","dispatch","contactsAction","showFilteredContacts","normalizedFilter","onClick","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.5ce1c904.chunk.js","sourcesContent":["import shortid from 'shortid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\nimport types from './contacts-type';\r\n\r\nconst addContact = createAction('contacts/aad', (name, number) => ({\r\n  payload: {\r\n    id: shortid.generate(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\n\r\nconst deleteContact = createAction('contacts/delete');\r\n\r\nconst changeFilter = createAction('contacts/changeFilter');\r\n\r\nexport default { addContact, deleteContact, changeFilter };\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport contactReducer from './contacts/contacts-reducer';\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactsAction from '../../redux/contacts/contacts-actions';\r\nimport PropTypes from 'prop-types';\r\nimport shortid from 'shortid';\r\nimport './ContactForm.scss';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const { name, number } = this.state;\r\n\r\n    const contactName = [];\r\n    this.props.contacts.map(contact =>\r\n      contactName.push(contact.name.toLowerCase()),\r\n    );\r\n\r\n    if (contactName.includes(name.toLowerCase())) {\r\n      return alert(`${name} is alredy in contacts`);\r\n    } else {\r\n      this.props.onSubmit(name, number);\r\n    }\r\n\r\n    this.resetInput();\r\n  };\r\n\r\n  handleChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  resetInput = () => {\r\n    this.setState({\r\n      name: '',\r\n      number: '',\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n\r\n    return (\r\n      <form className=\"add-form\" onSubmit={this.handleSubmit}>\r\n        <label className=\"add-form__label\">\r\n          Name\r\n          <input\r\n            className=\"add-form__input\"\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={name}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            onChange={this.handleChange}\r\n          />\r\n          <label className=\"add-form__label\">\r\n            Number\r\n            <input\r\n              className=\"add-form__input\"\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              value={number}\r\n              pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n              title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n              required\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n          <button className=\"add-form__btn\" type=\"submit\">\r\n            Add contact\r\n          </button>\r\n        </label>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: state.contacts.items,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: (name, number) => dispatch(contactsAction.addContact(name, number)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactsAction from '../../redux/contacts/contacts-actions';\r\nimport PropTypes from 'prop-types';\r\nimport './Filter.scss';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <div className=\"find-form\">\r\n    <label className=\"find-form__label\">\r\n      Find contact by name\r\n      <input\r\n        className=\"find-form__input\"\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n    </label>\r\n  </div>\r\n);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  value: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: e => dispatch(contactsAction.changeFilter(e.currentTarget.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactsAction from '../../redux/contacts/contacts-actions';\r\nimport PropTypes from 'prop-types';\r\nimport './ContactList.scss';\r\n\r\nconst ContactList = ({ contacts, deleteContact }) => (\r\n  <div className=\"contact\">\r\n    <ul className=\"contact__list\">\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id} className=\"contact__item\">\r\n          {name}&nbsp;{number}\r\n          <button\r\n            type=\"button\"\r\n            className=\"contact__btn\"\r\n            onClick={() => deleteContact(id)}\r\n          >\r\n            Удалить\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  </div>\r\n);\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n  deleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nconst showFilteredContacts = (contacts, filter) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return contacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(normalizedFilter),\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n  contacts: showFilteredContacts(items, filter),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  deleteContact: id => dispatch(contactsAction.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React, { Component } from 'react';\nimport shortid from 'shortid';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList';\n\nclass App extends Component {\n  /* componentDidMount() {\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  } */\n\n  /* componentDidUpdate(prevProps, prevState) {\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  } */\n\n  /*  addContact = (name, number) => {\n    const contactName = [];\n    this.state.contacts.map(contact =>\n      contactName.push(contact.name.toLowerCase()),\n    );\n\n    const newContact = {\n      id: shortid.generate(),\n      name,\n      number,\n    };\n\n    if (contactName.includes(name.toLowerCase())) {\n      return alert(`${name} is alredy in contacts`);\n    } else {\n      this.setState(({ contacts }) => ({\n        contacts: [newContact, ...contacts],\n      }));\n    }\n  }; */\n\n  render() {\n    return (\n      <>\n        <div className=\"section\">\n          <h1>Phonebook</h1>\n          <ContactForm /* onSubmit={this.addContact}  */ />\n\n          <p>Contacts</p>\n\n          <Filter /* value={filter} onChange={this.changeFilter} */ />\n\n          <ContactList\n          /* contacts={filteredContacts}\n            deleteContact={this.deleteContact} */\n          />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport store from './redux/store';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}